# flask-api-server/kubernetes/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-api-server
  labels:
    app: flask-api-server
spec:
  replicas: 1 # 시작은 1개로, 필요에 따라 늘릴 수 있습니다.
  selector:
    matchLabels:
      app: flask-api-server
  template:
    metadata:
      labels:
        app: flask-api-server
    spec:
      serviceAccountName: job-creator-sa # 위에서 생성한 서비스 어카운트 사용
      containers:
      - name: flask-api
        image: your-registry/flask-api-server:latest # 위에서 빌드한 이미지 이름
        ports:
        - containerPort: 5000
        livenessProbe: # 헬스 체크 엔드포인트 사용
          httpGet:
            path: /healthz
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 5
        readinessProbe:
          httpGet:
            path: /healthz
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 5
        resources: # 적절한 리소스 요청/제한 설정
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
      # 컨트롤 플레인 노드에 배포할 경우, 해당 노드의 Taint를 허용해야 합니다.
      # kubectl describe node <컨트롤-플레인-노드-이름> 에서 Taint를 확인하고 설정
      tolerations:
      - key: "node-role.kubernetes.io/control-plane"
        operator: "Exists"
        effect: "NoSchedule"
      # - key: "node-role.kubernetes.io/master" # kubeadm 1.25+ 에서는 control-plane 사용
      #   operator: "Exists"
      #   effect: "NoSchedule"
      nodeSelector: # 컨트롤 플레인 노드에만 스케줄되도록 라벨을 추가할 수도 있습니다.
        kubernetes.io/hostname: <컨트롤-플레인-노드-이름>